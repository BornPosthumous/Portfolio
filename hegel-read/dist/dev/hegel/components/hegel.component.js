"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('angular2/core');
var router_1 = require('angular2/router');
var hegel_service_1 = require('../../shared/services/hegel.service');
var search_pipe_1 = require('../../search/search-pipe');
var Rx = require('rxjs/Rx');
var browser_1 = require('angular2/platform/browser');
var HegelComponent = (function () {
    function HegelComponent(hegelService, _dom) {
        this.hegelService = hegelService;
        this._dom = _dom;
        this.index = 1;
        this.item = 0;
        this.searchTerm = "";
        this.dictionaries = { info: [] };
        this.previous = [];
    }
    ;
    HegelComponent.prototype.increment = function (num) {
        this.index += num;
        this.getInd(this.index);
    };
    HegelComponent.prototype.getInd = function (num) {
        var _this = this;
        this.hegelService.getHegel(num).subscribe(function (res) { return _this.hegel = res; });
    };
    ;
    HegelComponent.prototype.getTerm = function (term) {
        term = term.replace(/[0-9]/g, '');
        term = term.replace(/\./g, '');
        this.getWiki(term);
    };
    HegelComponent.prototype.handleLink = function ($event) {
        console.log("Link handling");
        var href = $event.target.href;
        href = href.slice(27, href.length);
        this.getWiki(href);
        $event.preventDefault();
    };
    HegelComponent.prototype.handleWikipediaLink = function ($event) {
        console.log("Handling Wiki Link");
        this.hegelService.handleWikipediaLink($event);
        $event.preventDefault();
    };
    HegelComponent.prototype.getWiki = function (word) {
        word = this.hegelService.replaceUnderscoreAndCap(word);
        console.log("Checking word" + word);
        var cacheCheck = this.checkCacheForTerm(word);
        if (cacheCheck.length > 0) {
            this.getCache(word);
        }
        else {
            this.hegelService.requestWiki(word).subscribe();
        }
    };
    HegelComponent.prototype.checkCacheForTerm = function (term) {
        var result = this.previous.filter(function (prev) {
            if (prev.word == term) {
                console.log("Returning", prev.word);
                return prev;
            }
        });
        return result;
    };
    HegelComponent.prototype.getCache = function (term) {
        var _this = this;
        var result = this.previous.filter(function (prev) {
            if (prev.word == term) {
                if (prev.page) {
                    console.log("Getting wiki from cache");
                    _this.wiki = prev.page;
                }
            }
        });
    };
    HegelComponent.prototype.handleCache = function (term) {
        console.log("Handling cache");
        if (typeof (term) == 'String') {
            console.log("Got a string!");
        }
        if (term.page) {
            console.log("Setting page");
            this.wiki = term.page;
        }
    };
    HegelComponent.prototype.getSelectionText = function () {
        var text = "";
        if (window.getSelection) {
            text = window.getSelection().toString();
        }
        else if (document.selection && document.selection.type != "Control") {
            text = document.selection.createRange().text;
        }
        return text;
    };
    HegelComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.getInd(this.index);
        var s = Rx.Observable.fromEvent(this._dom.query('body'), 'click');
        s.subscribe(function (e) {
            console.log(e.target.textContent);
            console.log("Selection text!");
            console.log(_this.getSelectionText());
            try {
                if (e.target.className == "term") {
                    var cacheCheck = _this.checkCacheForTerm(e.target.computedName);
                    if (cacheCheck.length > 0) {
                        console.log("Gotta handle that");
                        _this.handleCache(e);
                    }
                    console.log("Cache check", cacheCheck);
                    if (cacheCheck.length > 0) {
                        _this.handleCache(cacheCheck[0]);
                    }
                    else {
                        console.log("computed name");
                        console.log(e.target.computedName);
                        _this.getTerm("Category:" + e.target.computedName);
                    }
                }
                if (e.target.className == "links") {
                    console.log("link name");
                    console.log(e.originalTarget.innerHtml);
                    _this.getTerm(e.target.textContent);
                    e.preventDefault();
                }
                if (e.target.className == "prevs") {
                    var term = _this.checkCacheForTerm(e.target.computedName);
                    console.log("Logging term from cache", term);
                    _this.handleCache(term[0]);
                }
                else {
                    var term = _this.getSelectionText();
                    _this.getTerm(term);
                }
            }
            catch (ex) {
                console.log(ex);
            }
        });
        function checkForBaddies(cat, baddies) {
            var exists = false;
            baddies.forEach(function (bad) {
                if (cat.indexOf(bad) > -1) {
                    exists = true;
                }
                else {
                }
            });
            return exists;
        }
        function filterOutBadCategories(categories) {
            var results = [];
            var baddies = ["Wikipedia", "Use dmy dates", "Use mdy dates", "All articles", "Articles", "NPOV", "CS1",
                "Commons category with local", "Hidden categories", "Tracking categories", "Pages with URL errors", "disambiguation", "Pages with incorrect ref formatting"];
            categories = categories.filter(function (cat) {
                if (checkForBaddies(cat, baddies) == false) {
                    results.push(cat);
                }
                else {
                    console.log("Bad Category ", cat);
                }
            });
            return results;
        }
        var src = Rx.Observable.fromEvent(this.hegelService.socket, 'wikiSend');
        var subject = new Rx.Subject();
        var multicasted = src.multicast(subject);
        var dicts = [];
        var categories = [];
        multicasted.filter(function (e) { if (e.dictionaries) {
            dicts = e.dictionaries;
            return e.dictionaries;
        } }).subscribe(function (msg) {
            _this.dictionaries = msg.dictionaries;
            _this.defs = msg.dictionaries.info.map(function (entry) {
                return entry.def;
            });
            _this.glosses = msg.dictionaries.info.map(function (def) { return def.gloss; });
        });
        multicasted.filter(function (e) {
            if (e.categories) {
                categories = e.categories;
                return e.categories;
            }
        })
            .subscribe(function (msg) {
            msg = msg.categories;
            _this.dis = false;
            msg = msg.map(function (cat) {
                cat = cat.substring(9, cat.length);
                if (cat.indexOf("All disambiguation pages") > -1) {
                    _this.dis = true;
                }
                return cat;
            });
            var results = filterOutBadCategories(msg);
            _this.terms = results;
        });
        multicasted.filter(function (e) {
            if (e.word) {
                console.log("word", e.word);
                var previousObj = { word: e.word, page: e.page };
                if (previousObj.word !== "") {
                    _this.previous.push(previousObj.word);
                }
            }
            if (e.page) {
                _this.wiki = e.page;
            }
            ;
            return e.page;
        }).subscribe(function (e) { });
        multicasted.filter(function (e) { if (e.results) {
            _this.terms = e.results;
        } ; return e.results; }).subscribe(function (e) {
        });
        multicasted.filter(function (e) { if (e.links) {
            _this.links = e.links;
        } ; return e.links; }).subscribe(function (e) {
        });
        multicasted.connect();
    };
    ;
    HegelComponent = __decorate([
        core_1.Component({
            selector: 'sd-navbar',
            templateUrl: '../hegel/components/hegel.template.html',
            styleUrls: ['../hegel/components/hegel.component.css'],
            directives: [router_1.ROUTER_DIRECTIVES],
            providers: [hegel_service_1.HegelService, browser_1.BrowserDomAdapter],
            pipes: [search_pipe_1.SearchPipe]
        }), 
        __metadata('design:paramtypes', [hegel_service_1.HegelService, browser_1.BrowserDomAdapter])
    ], HegelComponent);
    return HegelComponent;
}());
exports.HegelComponent = HegelComponent;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
