"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var http_1 = require('angular2/http');
var core_1 = require('angular2/core');
require('rxjs/add/operator/map');
require('rxjs/add/operator/toPromise');
var Rx = require('rxjs/Rx');
var BASE_URL = 'http://localhost:3030/api/';
var HEADER = { headers: new http_1.Headers({ 'Content-Type': 'image/jpeg' }) };
var HegelService = (function () {
    function HegelService(http) {
        var _this = this;
        this.http = http;
        this.socket = io('http://localhost:3030', { reconnect: true });
        this.socket.on("wikiSend", function (msg) {
            msg = { msg: msg };
            _this.socket.emit('received', msg, function (data) { });
        });
        this.mouseup = this.fromDOMSource('mouseup', window.document).map(function (pos) { return _this.getSelectionText(pos); });
    }
    HegelService.prototype.fromDOMSource = function (eventName, el) {
        return Rx.Observable.fromEventPattern(function (callback) { return el.addEventListener(eventName, callback, false); }, function (callback) { return el.removeEventListener(eventName, callback); });
    };
    HegelService.prototype.handleWikipediaLink = function ($event) {
        console.log("Gotta handle that!");
        var href = $event.srcElement.href;
        href = href.slice(27, href.length);
        return this.getWiki(href);
    };
    HegelService.prototype.getWiki = function (word) {
        word = this.replaceUnderscoreAndCap(word);
        word = word.replace(/\_/g, " ");
        console.log("Getting word" + word);
        this.requestWiki(word).subscribe(function (res) {
            res = JSON.parse(res);
            if (res.type === "html") {
                console.log("HTML");
                return res.results;
            }
            else if (res.type === 'terms') {
                console.log("TERMS");
                return res.results;
            }
        });
    };
    HegelService.prototype.replaceUnderscoreAndCap = function (word) {
        word = word.charAt(0).toUpperCase() + word.slice(1);
        word = word.replace(/\_/g, " ");
        return word;
    };
    HegelService.prototype.getSelectionText = function () {
        console.log("Getting selection text");
        var text = "";
        if (window.getSelection) {
            text = window.getSelection().toString();
        }
        else if (document.selection && document.selection.type != "Control") {
            text = document.selection.createRange().text;
        }
        console.log("Selection text: ", text);
        return text;
    };
    HegelService.prototype.getHegel = function (num) {
        return this.http.get(BASE_URL + "hegels/" + num, HEADER)
            .map(function (res) { return res.json(); }).map(function (res) { return res[0]; });
    };
    HegelService.prototype.requestWiki = function (word) {
        console.log("Getting Wiki :", word);
        if (word !== "") {
            return this.http.get(BASE_URL + "wiki/" + word)
                .map(function (res) { return res._body; });
        }
    };
    HegelService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [http_1.Http])
    ], HegelService);
    return HegelService;
}());
exports.HegelService = HegelService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
